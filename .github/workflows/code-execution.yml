name: Code Execution Tester

on:
  workflow_dispatch:
    inputs:
      filename:
        description: 'Filename with extension (e.g., main.cpp)'
        required: true
      code:
        description: 'Source code to execute'
        required: true
      input:
        description: 'Input for the program (optional)'
        required: false
        default: ''

jobs:
  execute-code:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Setup environment
        id: setup
        run: |
          filename="${{ github.event.inputs.filename }}"
          extension="${filename##*.}"
          
          case $extension in
            cpp)   lang="cpp";  command="./program" ;;
            java)  lang="java"; command="java Main" ;;
            py)    lang="py";   command="python3 $filename" ;;
            js)    lang="js";   command="node $filename" ;;
            *)     echo "Unsupported file type"; exit 1 ;;
          esac

          echo "filename=$filename" >> $GITHUB_OUTPUT
          echo "lang=$lang" >> $GITHUB_OUTPUT
          echo "command=$command" >> $GITHUB_OUTPUT
          echo "input_file=input.txt" >> $GITHUB_OUTPUT
          echo "output_file=output.txt" >> $GITHUB_OUTPUT
          echo "error_file=error.txt" >> $GITHUB_OUTPUT
          echo "time_mem=time_mem.txt" >> $GITHUB_OUTPUT

      - name: Create files
        run: |
          echo '${{ github.event.inputs.code }}' > ${{ steps.setup.outputs.filename }}
          if [ -n "${{ github.event.inputs.input }}" ]; then
            echo '${{ github.event.inputs.input }}' > ${{ steps.setup.outputs.input_file }}
          fi

      - name: Install dependencies
        run: |
          sudo apt-get update
          case "${{ steps.setup.outputs.lang }}" in
            cpp)  sudo apt-get install -y g++ ;;
            java) sudo apt-get install -y openjdk-17-jdk ;;
            py)   sudo apt-get install -y python3 ;;
            js)   sudo apt-get install -y nodejs ;;
          esac
          sudo apt-get install -y time bc

      - name: Compile code
        if: contains('cpp java', steps.setup.outputs.lang)
        run: |
          case "${{ steps.setup.outputs.lang }}" in
            cpp)
              g++ ${{ steps.setup.outputs.filename }} -o program -O2 2> ${{ steps.setup.outputs.error_file }} || {
                echo "status=CE" >> $GITHUB_OUTPUT
                echo "message=Compilation Error" >> $GITHUB_OUTPUT
                exit 0
              }
              ;;
            java)
              javac ${{ steps.setup.outputs.filename }} 2> ${{ steps.setup.outputs.error_file }} || {
                echo "status=CE" >> $GITHUB_OUTPUT
                echo "message=Compilation Error" >> $GITHUB_OUTPUT
                exit 0
              }
              ;;
          esac
          echo "status=Compiled" >> $GITHUB_OUTPUT

      - name: Execute code
        id: execution
        if: steps.compile.outputs.status != 'CE'
        run: |
          # Set resource limits
          ulimit -v 524288  # 512MB memory limit

          # Prepare input
          [ -f "${{ steps.setup.outputs.input_file }}" ] && input_redir="< ${{ steps.setup.outputs.input_file }}" || input_redir=""

          # Execute with measurements
          start=$(date +%s.%N)
          /usr/bin/time -f "%e %M" -o ${{ steps.setup.outputs.time_mem }} timeout 2s \
            sh -c "${{ steps.setup.outputs.command }} $input_redir" \
            > ${{ steps.setup.outputs.output_file }} \
            2> ${{ steps.setup.outputs.error_file }} || true
          exit_code=$?
          end=$(date +%s.%N)
          
          # Calculate execution time
          runtime=$(echo "$end - $start" | bc -l)
          [ -z "$runtime" ] && runtime=0

          # Get memory usage
          if [ -f "${{ steps.setup.outputs.time_mem }}" ]; then
            mem_usage=$(awk '{print $2}' ${{ steps.setup.outputs.time_mem }})
          else
            mem_usage=0
          fi

          # Determine result status
          if [ $exit_code -eq 0 ]; then
            status="AC"
            message="Execution Successful"
          elif [ $exit_code -eq 124 ]; then
            status="TLE"
            message="Time Limit Exceeded"
          elif [ $mem_usage -gt 524288 ]; then
            status="MLE"
            message="Memory Limit Exceeded"
          elif [ $exit_code -eq 139 ]; then
            status="SIGSEGV"
            message="Segmentation Fault"
          else
            status="RE"
            message="Runtime Error"
          fi

          echo "status=$status" >> $GITHUB_OUTPUT
          echo "message=$message" >> $GITHUB_OUTPUT
          echo "execution_time=$runtime" >> $GITHUB_OUTPUT
          echo "memory_usage=$mem_usage" >> $GITHUB_OUTPUT
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

      - name: Generate report
        run: |
          # Prepare data
          output=$(cat ${{ steps.setup.outputs.output_file }} | jq -Rsa .)
          error=$(cat ${{ steps.setup.outputs.error_file }} | jq -Rsa .)
          
          if [ "${{ steps.compile.outputs.status }}" = "CE" ]; then
            error_msg=$(cat ${{ steps.setup.outputs.error_file }} | jq -Rsa .)
            jq -n \
              --arg status "CE" \
              --arg message "Compilation Error" \
              --arg error "$error_msg" \
              '{status: $status, message: $message, error: $error}'
          else
            jq -n \
              --arg status "${{ steps.execution.outputs.status }}" \
              --arg message "${{ steps.execution.outputs.message }}" \
              --arg time "${{ steps.execution.outputs.execution_time }}" \
              --arg mem "${{ steps.execution.outputs.memory_usage }}" \
              --arg code "${{ steps.execution.outputs.exit_code }}" \
              --arg output "$output" \
              --arg error "$error" \
              '{
                status: $status, 
                message: $message,
                execution_time: $time | tonumber,
                memory_usage: $mem | tonumber,
                exit_code: $code | tonumber,
                output: $output,
                error: $error
              }'
          fi > result.json

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: code-results
          path: result.json