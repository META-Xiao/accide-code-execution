name: Code Execution Workflow

on:
  workflow_dispatch:
    inputs:
      filename:
        description: 'Name of the file to execute'
        required: true
      language:
        description: 'Programming language (cpp, python, java, nodejs)'
        required: true
      code:
        description: 'Source code to execute'
        required: true
      input:
        description: 'Input for the program'
        required: false
        default: ''

jobs:
  execute-code:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set execution variables
        id: vars
        run: |
          echo "filename=${{ github.event.inputs.filename }}" >> $GITHUB_OUTPUT
          echo "language=${{ github.event.inputs.language }}" >> $GITHUB_OUTPUT
          echo "input_file=input.txt" >> $GITHUB_OUTPUT
          echo "output_file=output.txt" >> $GITHUB_OUTPUT
          echo "error_file=error.txt" >> $GITHUB_OUTPUT
      
      - name: Create source code file
        run: |
          echo '${{ github.event.inputs.code }}' > ${{ steps.vars.outputs.filename }}
          
      - name: Create input file if needed
        if: ${{ github.event.inputs.input != '' }}
        run: |
          echo '${{ github.event.inputs.input }}' > ${{ steps.vars.outputs.input_file }}
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          if [ "${{ steps.vars.outputs.language }}" == "cpp" ]; then
            sudo apt-get install -y g++ time bc
          elif [ "${{ steps.vars.outputs.language }}" == "java" ]; then
            sudo apt-get install -y openjdk-17-jdk time bc
          elif [ "${{ steps.vars.outputs.language }}" == "python" ]; then
            sudo apt-get install -y python3 python3-pip time bc
          elif [ "${{ steps.vars.outputs.language }}" == "nodejs" ]; then
            sudo apt-get install -y nodejs npm time bc
          fi
      
      - name: Compile code (C++)
        id: compile_cpp
        if: steps.vars.outputs.language == 'cpp'
        continue-on-error: true
        run: |
          g++ ${{ steps.vars.outputs.filename }} -o program -O2 2> ${{ steps.vars.outputs.error_file }}
          if [ $? -ne 0 ]; then
            echo "status=CE" >> $GITHUB_OUTPUT
            echo "message=Compilation Error" >> $GITHUB_OUTPUT
            cat ${{ steps.vars.outputs.error_file }}
          else
            echo "status=Compiled" >> $GITHUB_OUTPUT
            echo "message=Compilation Successful" >> $GITHUB_OUTPUT
          fi
      
      - name: Compile code (Java)
        id: compile_java
        if: steps.vars.outputs.language == 'java'
        continue-on-error: true
        run: |
          javac ${{ steps.vars.outputs.filename }} 2> ${{ steps.vars.outputs.error_file }}
          if [ $? -ne 0 ]; then
            echo "status=CE" >> $GITHUB_OUTPUT
            echo "message=Compilation Error" >> $GITHUB_OUTPUT
            cat ${{ steps.vars.outputs.error_file }}
          else
            echo "status=Compiled" >> $GITHUB_OUTPUT
            echo "message=Compilation Successful" >> $GITHUB_OUTPUT
          fi
      
      - name: Execute code (C++)
        id: execute_cpp
        if: steps.vars.outputs.language == 'cpp' && steps.compile_cpp.outputs.status == 'Compiled'
        continue-on-error: true
        run: |
          # Set memory limit
          ulimit -v 524288
          
          start_time=$(date +%s.%N)
          
          if [ -f "${{ steps.vars.outputs.input_file }}" ]; then
            /usr/bin/time -f "%M" -o memory.txt timeout 2s ./program < ${{ steps.vars.outputs.input_file }} > ${{ steps.vars.outputs.output_file }} 2> ${{ steps.vars.outputs.error_file }} || true
          else
            /usr/bin/time -f "%M" -o memory.txt timeout 2s ./program > ${{ steps.vars.outputs.output_file }} 2> ${{ steps.vars.outputs.error_file }} || true
          fi
          
          exit_code=$?
          end_time=$(date +%s.%N)
          execution_time=$(echo "$end_time - $start_time" | bc)
          
          if [ -f memory.txt ]; then
            memory_usage=$(cat memory.txt)
          else
            memory_usage=0
          fi
          
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          echo "execution_time=$execution_time" >> $GITHUB_OUTPUT
          echo "memory_usage=$memory_usage" >> $GITHUB_OUTPUT
          
          if [ $exit_code -eq 0 ]; then
            echo "status=AC" >> $GITHUB_OUTPUT
            echo "message=Accepted" >> $GITHUB_OUTPUT
          elif [ $exit_code -eq 124 ] || [ $exit_code -eq 137 ] || [ $exit_code -eq 143 ]; then
            echo "status=TLE" >> $GITHUB_OUTPUT
            echo "message=Time Limit Exceeded" >> $GITHUB_OUTPUT
          elif [ $exit_code -eq 139 ]; then
            echo "status=SIGSEGV" >> $GITHUB_OUTPUT
            echo "message=Runtime Error (SIGSEGV)" >> $GITHUB_OUTPUT
          elif [ $memory_usage -gt 524288 ]; then
            echo "status=MLE" >> $GITHUB_OUTPUT
            echo "message=Memory Limit Exceeded" >> $GITHUB_OUTPUT
          else
            echo "status=RE" >> $GITHUB_OUTPUT
            echo "message=Runtime Error" >> $GITHUB_OUTPUT
          fi
      
      - name: Create result file
        run: |
          sudo apt-get install -y jq
          
          if [ "${{ steps.vars.outputs.language }}" == "cpp" ]; then
            status="${{ steps.compile_cpp.outputs.status }}"
            if [ "$status" == "CE" ]; then
              message="Compilation Error"
              error_content=$(cat ${{ steps.vars.outputs.error_file }})
              echo '{
                "status": "CE",
                "message": "Compilation Error",
                "compile_error": "'"${error_content//$'\n'/\\n}"'",
                "output": "",
                "execution_time": 0,
                "memory_usage": 0,
                "exit_code": 0
              }' > result.json
            else
              status="${{ steps.execute_cpp.outputs.status }}"
              message="${{ steps.execute_cpp.outputs.message }}"
              output_content=$(cat ${{ steps.vars.outputs.output_file }})
              error_content=$(cat ${{ steps.vars.outputs.error_file }})
              execution_time="${{ steps.execute_cpp.outputs.execution_time }}"
              memory_usage="${{ steps.execute_cpp.outputs.memory_usage }}"
              exit_code="${{ steps.execute_cpp.outputs.exit_code }}"
              
              echo '{
                "status": "'"$status"'",
                "message": "'"$message"'",
                "compile_error": "",
                "output": "'"${output_content//$'\n'/\\n}"'",
                "error": "'"${error_content//$'\n'/\\n}"'",
                "execution_time": '"$execution_time"',
                "memory_usage": '"$memory_usage"',
                "exit_code": '"$exit_code"'
              }' > result.json
            fi
          fi
      
      - name: Upload execution result
        uses: actions/upload-artifact@v4
        with:
          name: execution-results
          path: result.json
          retention-days: 1