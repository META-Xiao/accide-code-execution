name: Code Execution Tester

on:
  workflow_dispatch:
    inputs:
      filename:
        description: 'Filename with extension (e.g., main.cpp)'
        required: true
      code:
        description: 'Source code to execute'
        required: true
      input:
        description: 'Input for the program (optional)'
        required: false
        default: ''

jobs:
  execute-code:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Setup environment
        id: setup
        run: |
          filename="${{ github.event.inputs.filename }}"
          extension="${filename##*.}"
          
          case $extension in
            cpp)   lang="cpp";  command="./program" ;;
            java)  lang="java"; command="java Main" ;;
            py)    lang="py";   command="python3 $filename" ;;
            js)    lang="js";   command="node $filename" ;;
            *)     echo "Unsupported file type"; exit 1 ;;
          esac

          echo "filename=$filename" >> $GITHUB_OUTPUT
          echo "lang=$lang" >> $GITHUB_OUTPUT
          echo "command=$command" >> $GITHUB_OUTPUT
          echo "input_file=input.txt" >> $GITHUB_OUTPUT
          echo "output_file=output.txt" >> $GITHUB_OUTPUT
          echo "error_file=error.txt" >> $GITHUB_OUTPUT

      - name: Create files
        run: |
          # Escape newlines in code
          echo '${{ github.event.inputs.code }}' | sed 's/\\n/\\\\n/g' > ${{ steps.setup.outputs.filename }}
          if [ -n "${{ github.event.inputs.input }}" ]; then
            echo '${{ github.event.inputs.input }}' > ${{ steps.setup.outputs.input_file }}
          fi

      - name: Install dependencies
        run: |
          sudo apt-get update
          case "${{ steps.setup.outputs.lang }}" in
            cpp)  sudo apt-get install -y g++ ;;
            java) sudo apt-get install -y openjdk-17-jdk ;;
            py)   sudo apt-get install -y python3 ;;
            js)   sudo apt-get install -y nodejs ;;
          esac
          sudo apt-get install -y bc

      - name: Compile code
        id: compile
        if: contains('cpp java', steps.setup.outputs.lang)
        run: |
          case "${{ steps.setup.outputs.lang }}" in
            cpp)
              g++ ${{ steps.setup.outputs.filename }} -o program -O2 2> ${{ steps.setup.outputs.error_file }} || {
                echo "status=CE" >> $GITHUB_OUTPUT
                echo "message=Compilation Error" >> $GITHUB_OUTPUT
                exit 0
              }
              ;;
            java)
              javac ${{ steps.setup.outputs.filename }} 2> ${{ steps.setup.outputs.error_file }} || {
                echo "status=CE" >> $GITHUB_OUTPUT
                echo "message=Compilation Error" >> $GITHUB_OUTPUT
                exit 0
              }
              ;;
          esac
          echo "status=Compiled" >> $GITHUB_OUTPUT

      - name: Execute code
        id: execution
        if: steps.compile.outputs.status != 'CE'
        run: |
          # Set resource limits
          ulimit -v 524288  # 512MB memory limit
          
          # Prepare input redirection
          input_redir=""
          if [ -f "${{ steps.setup.outputs.input_file }}" ]; then
            input_redir="< ${{ steps.setup.outputs.input_file }}"
          fi
          
          # Execute with timeout
          start=$(date +%s.%N)
          
          # Use eval to handle input redirection properly
          eval "timeout 2s ${{ steps.setup.outputs.command }} $input_redir" \
            > ${{ steps.setup.outputs.output_file }} \
            2> ${{ steps.setup.outputs.error_file }} || true
          
          exit_code=$?
          end=$(date +%s.%N)
          runtime=$(echo "$end