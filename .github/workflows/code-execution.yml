name: Code Execution Tester

on:
  workflow_dispatch:
    inputs:
      filename:
        description: 'Filename with extension (e.g., main.cpp)'
        required: true
      code:
        description: 'Source code to execute'
        required: true
      input:
        description: 'Input for the program (optional)'
        required: false
        default: ''

jobs:
  execute-code:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Setup environment
        id: setup
        run: |
          filename="${{ github.event.inputs.filename }}"
          extension="${filename##*.}"
          
          case $extension in
            cpp)   lang="cpp";  command="./program" ;;
            java)  lang="java"; command="java Main" ;;
            py)    lang="py";   command="python3 $filename" ;;
            js)    lang="js";   command="node $filename" ;;
            *)     echo "Unsupported file type"; exit 1 ;;
          esac

          echo "filename=$filename" >> $GITHUB_OUTPUT
          echo "lang=$lang" >> $GITHUB_OUTPUT
          echo "command=$command" >> $GITHUB_OUTPUT
          echo "input_file=input.txt" >> $GITHUB_OUTPUT
          echo "output_file=output.txt" >> $GITHUB_OUTPUT
          echo "error_file=error.txt" >> $GITHUB_OUTPUT

      - name: Debug setup
        run: |
          echo "Filename: ${{ steps.setup.outputs.filename }}"
          echo "Language: ${{ steps.setup.outputs.lang }}"
          echo "Command: ${{ steps.setup.outputs.command }}"

      - name: Create files
        run: |
          # 创建源代码文件
          cat << 'EOF' > "${{ steps.setup.outputs.filename }}"
          ${{ github.event.inputs.code }}
          EOF
          
          # 创建输入文件（如果有输入）
          if [ -n "${{ github.event.inputs.input }}" ]; then
            echo '${{ github.event.inputs.input }}' > "${{ steps.setup.outputs.input_file }}"
          fi
          
          # 显示文件列表和工作目录
          pwd
          ls -la
          echo "Source file content:"
          cat "${{ steps.setup.outputs.filename }}"

      - name: Install dependencies
        run: |
          sudo apt-get update
          case "${{ steps.setup.outputs.lang }}" in
            cpp)  
              sudo apt-get install -y g++ bc
              g++ --version
              ;;
            java) sudo apt-get install -y openjdk-17-jdk ;;
            py)   sudo apt-get install -y python3 ;;
            js)   sudo apt-get install -y nodejs ;;
          esac

      - name: Verify file exists
        run: |
          echo "Working directory: $(pwd)"
          echo "File absolute path: $(realpath ${{ steps.setup.outputs.filename }})"
          if [ -f "${{ steps.setup.outputs.filename }}" ]; then
            echo "File exists and is readable"
            ls -la "${{ steps.setup.outputs.filename }}"
            file "${{ steps.setup.outputs.filename }}"
          else
            echo "File does not exist or is not readable"
            exit 1
          fi

      - name: Compile code with debug
        id: compile
        if: contains('cpp java', steps.setup.outputs.lang)
        run: |
          # 使用setup步骤输出的文件名变量
          echo "Compiling file: ${{ steps.setup.outputs.filename }}"
          
          if [ "${{ steps.setup.outputs.lang }}" = "cpp" ]; then
            echo "Running: g++ \"${{ steps.setup.outputs.filename }}\" -o program -O2 -Wall -Wextra"
            # 使用set -x打开shell调试模式
            set -x
            g++ "${{ steps.setup.outputs.filename }}" -o program -O2 -Wall -Wextra 2> "${{ steps.setup.outputs.error_file }}"
            compile_status=$?
            set +x
          elif [ "${{ steps.setup.outputs.lang }}" = "java" ]; then
            echo "Running: javac \"${{ steps.setup.outputs.filename }}\""
            set -x
            javac "${{ steps.setup.outputs.filename }}" 2> "${{ steps.setup.outputs.error_file }}"
            compile_status=$?
            set +x
          fi
          
          if [ $compile_status -ne 0 ]; then
            echo "Compilation failed with status: $compile_status"
            echo "status=CE" >> $GITHUB_OUTPUT
            echo "result=Compilation Error" >> $GITHUB_OUTPUT
            echo "Compilation error details:"
            cat "${{ steps.setup.outputs.error_file }}"
          else
            echo "status=Compiled" >> $GITHUB_OUTPUT
            echo "result=Compilation Successful" >> $GITHUB_OUTPUT
            echo "Compilation successful!"
          fi

      - name: Execute code
        id: execution
        if: steps.compile.outputs.status == 'Compiled'
        run: |
          # 设置内存限制
          ulimit -v 524288  # 512MB
          
          # 准备输入重定向
          input_redir=""
          if [ -f "${{ steps.setup.outputs.input_file }}" ]; then
            input_redir="< ${{ steps.setup.outputs.input_file }}"
          fi
          
          # 执行程序
          start_time=$(date +%s.%N)
          
          echo "Running: ${{ steps.setup.outputs.command }} $input_redir"
          # 使用eval处理输入重定向
          set -x
          eval "timeout 2s ${{ steps.setup.outputs.command }} $input_redir" \
            > "${{ steps.setup.outputs.output_file }}" \
            2> "${{ steps.setup.outputs.error_file }}" || true
          set +x
          
          exit_code=$?
          end_time=$(date +%s.%N)
          
          # 计算执行时间
          execution_time=$(echo "$end_time - $start_time" | bc -l || echo 0)
          
          # 确定执行状态
          if [ $exit_code -eq 0 ]; then
            status="AC"
            message="Accepted"
          elif [ $exit_code -eq 124 ]; then
            status="TLE"
            message="Time Limit Exceeded"
          elif [ $exit_code -eq 137 ]; then
            status="MLE"
            message="Memory Limit Exceeded"
          elif [ $exit_code -eq 139 ]; then
            status="SIGSEGV"
            message="Segmentation Fault"
          else
            status="RE"
            message="Runtime Error"
          fi
          
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "message=$message" >> $GITHUB_OUTPUT
          echo "execution_time=$execution_time" >> $GITHUB_OUTPUT
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          
          echo "Execution status: $status"
          echo "Exit code: $exit_code"
          echo "Execution time: $execution_time seconds"
          
          echo "Program output:"
          cat "${{ steps.setup.outputs.output_file }}"
          
          if [ -s "${{ steps.setup.outputs.error_file }}" ]; then
            echo "Error output:"
            cat "${{ steps.setup.outputs.error_file }}"
          fi

      - name: Generate report
        run: |
          sudo apt-get install -y jq
          
          # 读取文件内容
          if [ -f "${{ steps.setup.outputs.output_file }}" ]; then
            output_content=$(jq -Rs . < "${{ steps.setup.outputs.output_file }}")
          else
            output_content='""'
          fi
          
          if [ -f "${{ steps.setup.outputs.error_file }}" ]; then
            error_content=$(jq -Rs . < "${{ steps.setup.outputs.error_file }}")
          else
            error_content='""'
          fi
          
          if [ "${{ steps.compile.outputs.status }}" = "CE" ]; then
            compile_error=$(jq -Rs . < "${{ steps.setup.outputs.error_file }}")
            jq -n \
              --arg status "CE" \
              --arg message "Compilation Error" \
              --arg error "$compile_error" \
              '{status: $status, message: $message, error: $error}'
          else
            jq -n \
              --arg status "${{ steps.execution.outputs.status }}" \
              --arg message "${{ steps.execution.outputs.message }}" \
              --arg time "${{ steps.execution.outputs.execution_time }}" \
              --arg code "${{ steps.execution.outputs.exit_code }}" \
              --arg output "$output_content" \
              --arg error "$error_content" \
              '{
                status: $status, 
                message: $message,
                execution_time: ($time | tonumber? // 0),
                exit_code: ($code | tonumber? // 1),
                output: $output,
                error: $error
              }'
          fi > result.json
          
          echo "Generated result.json:"
          cat result.json

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: code-results
          path: result.json